=================================================================================================================================================
=================================================================================================================================================
================================================================== UNITY GUIDE ==================================================================
=================================================================================================================================================
=================================================================================================================================================


====================================================
============= PHYSICS OBJECTS OVERVIEW =============
====================================================



============ RIGIDBODY ============

Contains: 
Details about mass
Drag - Damper
Angular Drag - Rotational Damper
Use Gravity - (Is object influenced by gravity)
Is Kinematic - Is not influenced by Physics but influences other objects.
Interpolate - Makes sense for main character, as otherwise animations and physics aren't calculated at some times.
Collition Detection
Constraints - Freeze position and rotation.

If you want to impact something with physics, it needs a rigid body. Otherwise it won't work.


============ COLLIDER ============

Box Collider - Makes sense for boxes or box shaped objects
Sphere Collider - Makes sense for spheres or round shaped objects
Mesh Collider - A skin on top of the looks of the graphics themselves. (Player with specific kind of form.
Capsule Collider - Makes sense for capsules but could work for players.
Terrain Collider - Makes sense for mountains or other terrains.

Each Collider has something called:

"Is Trigger" which will make each object have a trigger.
Material / Physics Material (Adds friction / bounciness / etc.)
Center - Center of our collider
Radius (For Spheres) - To change size of Sphere Colliders

============ TRIGGERS ============

In order to use an object or Physics Collider as a trigger,
You need to activate the Is Trigger Property.

When Is Trigger is active, it deactivates Colliders (Objects could simply pass through physical things)
This is great for invisible walls that need to start an event when passed through.

Great for collectibles.

The Is Trigger makes something happen when the trigger is set.



==================================================================================================================================================
================================================================== HOW-TO GUIDE ==================================================================
==================================================================================================================================================


==========================================
 How to add physics materials to objects?
==========================================

First create a physics material (Right Click assets and choose create > physic material)
Give your prefered name to the new material.
You will see properties like dynamic friction, static friction, bounciness, friction combine and bounce combine.
Edit the values to your liking.
Drag and drop your new material to your object (in either the hierarchy tab or the object itself in the scene)
Or click on the object and in the Inspector tab in the collider section, go to the material dropdown menu and select your newly created material. 

======================================
 How to have a ground that is bouncy?
======================================

Add a material.
First create a physics material (Right Click assets and choose create > physic material)
Give your prefered name to the new asset.

- Set all friction values to 0. (Optional)
- Add a value to the bounciness. (Value of 1 means that object will bounce with the same force that it came with).


====================================
 How to set up friction in objects?
====================================

Add a material.
First create a physics material (Right Click assets and choose create > physic material)
Give your prefered name to the new asset.

- Set bounciness value to 0. (Optional)
- Add a value to the static and dynamic friction. 


========================
 How to use Is Trigger?
========================

Creating an example with a ball and a cube sized to be a wall.
When the ball passes through the cube, i want the cube to disappear.
How to do this? 

First you need to create a new script.
The start and update method is not needed so you can delete it.

Whenever something needs to happen whenever an object is hit by another object, we need to use the OnTriggerEnter method.

Script code below: 

private void OnTriggerEnter(Collider other)
{
	print("Trigger");
	// This method destroys the game object passed.
	// In this case, gameObject is the object that contains this trigger script.
	Destroy(gameObject);
}

====================================
 How to keep your assets organized?
====================================

Create folders for scripts, materials, physic materials, etc.


============================================
 What are prefabs / how to create prefabs?
============================================
 
Prefabs or prefabricates are objects that have specific properties that you'd like to reuse.
To create prefabs, just drag the object you want to reuse from the hierarchy tab into the assets folder.

Recommend to have players as prefab in order to use it in other scenes.
Also, add a prefabs folder for all your prefabs.

============================================
 What are components and how to use them?
============================================

Component functionality is fundamental.
It allows you to add functionality, looks or physics to objects.

The components can be seen in the Inspector tab.

To add components to an object, simply select the object and
in the Inspector tab, scroll down to the bottom of the tab and click add component.

You can also copy components from one object and paste them into another 
by clicking the 3 vertical dots in each component section.

You can move components up or down (in order) in your Inspector tab.

(Be careful when moving or deleting components since it could break your prefab instances
If you want to alter components, do it in your prefab (Located in assets) and not 
in an instance of your prefab (located in the hierarchy tab)).


============================================
 How to keep your object hierarchy clean?
============================================

Whenever you're creating a game, there will be hundreds of thousands of objects.
You need to keep track of all your objects. How do you do this?

Create folders for each objects. For example, walls, players, bullets, etc.

To create a folder, right click inside the hierarchy tab and select "Create Empty".
Drag and drop your objects into that new Object folder. You can rename the folder by pressing F2 or 
right clicking and renaming the folder.

============================================
 Understanding the Start and Update Method
============================================

Start method is called at the beginning, when the game starts.

The Update method is called once per frame 
(If it's 60 fps, method will be called 60 times).


============================================
 Understanding the Random and Mathf class
============================================

The random class is used to generate random numbers.
For example, to generate a random number between 0 and 15:
 
// This line stores a random number between 0 and 15 into a float type variable called randNum
float randNum = Random.Range(0f, 15f);

// This line of code prints the random number.
Debug.Log(randNum);

The Mathf class has a series of Math functions that will make working with math
very easy. To access the methods, type Mathf.(A list of methods will be displayed)

==========================================================
 How to display text in the UI? (Canvas and Event System) 
==========================================================

To create some text, right click inside the hierarchy tab, select UI > Text.
If we didn't have an UI, whenever we create it, a canvas and event system object is created automatically.

When a Text is created, it's placed inside a canvas object (Text is a child of our canvas). 

If you click on canvas, you can see all of its components.
By default, the Canvas render mode is Screen Space - Overlay.
What this does is that it will overlay whatever we assign to the UI player or space on top of the game view itself.
(Meaning, text will always appear in the screen)

Using Screen Space - Camera will position the UI element based on the camera position.

Text will be displayed into the UI. If you click on the text in the Inspector tab, you can change a lot of 
text properties including font size, weight, color, font (Need to download from assets), etc.
_______________
To Resize text, set horizontal and vertical overflow to Overflow

==========================================================
 How to change a text object programmatically? (Scripts)
==========================================================

Create a script to handle the text.
Import the package "using UnityEngine.UI;"
This namespace is used to create text objects.

// Created a Text object:
public Text myText;
// Created an integer for an example.
int textNum = 0;

// Added this code to my Update Method.

// Update is called once per frame
    void Update()
    {
        // If the spacebar is pressed, 
        // change text into a number.
        if (Input.GetKeyDown(KeyCode.Space))
        {
            // INcrement textNum by 1
            textNum++;
            myText.text = textNum.ToString();
        } // If Input was S
        else if (Input.GetKeyDown(KeyCode.S))
        {
            myText.text = "S was pressed";
        }
    }
	
Now, in Unity, add your script to an object and 
drag a text UI object into the inspector tab, 
where the script text variable is. IN this case, 
it's called My Text.

==========================================================
 Best practice to manage game scores, states & other stuff
==========================================================

It's recommended to create an empty object (folder), Game manager, 
used to collect scores, take care of states, etc.

==========================================================
                      Basics of Buttons 
==========================================================

Buttons are similar to texts in that they create canvas objects.
They also have their own text component.

The button text stretches to the size of it's parent. (Button)
To change the button appeareance with an image, you could drag an
image to the button's source image property in the canvas renderer component.

To make the button interactable, you need to create a script.

Example script: 

// To use the Text class, add "using UnityEngine.UI;" to your imports in visual studio.
public Text scoreText;

// Creating our own method
public void OnButtonPressed()
{
	scoreText.text = "The Button was pressed";
}

- After creating this script, add it to your button.
- Then, drag a text object from your hierarchy into the 
  score text variable in the script section 
- Finally, add the button object to the OnClick method 
  section in the inspector (while selecting the button object)
  go to the dropdown, select your script name (In this case, "ButtonBehavior")
  and then select the created method in the script (In this case, OnButtonPressed()).
  
That way, you'll be able to use your script when the button is clicked.

==========================================================
                      Variables in Unity 
==========================================================

When you declare variables in a script, you can populate those variables
by dragging and dropping objects from the hierarchy into the script section
in your inspector tab. The script section will contain an empty box with your 
variable name


==========================================================
 Switching Scenes - How to move from one scene to another
==========================================================

In your Assets > Scenes folder, right click and select Create > Scene

To move from one scene to another, create a script: 

In that script, import the Scene Manager ("using UnityEngine.SceneManagement;")

The SceneManager object has a method called LoadScene();

LoadScene() has multiple overloads.
You could for example say, LoadScene(1); which will take you to the scene in index 1.
Or LoadScene("Scene Name") which will take you to the specific scene.

Before executing this script, go to File > Build Settings
and in the Scenes In Build, add the scenes you want to change from.
(If you look closely, when the scene is added you can see the scene 
index in the right side)


==========================================================
 How to play sounds on Unity / Start sound via code.
==========================================================

To get royalty free sounds, you could go to: 

freesound.org, OpenGameArt.Org, 

You can also go to the Asset store and search for "Absolutely Free Music"
Download and import the package. (You can also import only the music you want.)

Example: Adding sound to a cube object

Add an Audio > Audio Source component to the cube.
The audio source expects an audio clip.
Drag a clip from your assets into the AudioClip property
inside the Audio Source component section in the Inspector.

If you start the game, you will hear the music.

That is because the Play on Awake checkbox is checked by default.
You set up the sound to your prefered settings by looping, muting, etc.


TO PLAY SOUNDS PROGRAMMATICALLY. (Creating script)

// Getting the audio source.
    public AudioSource music;

    // Update is called once per frame
    void Update()
    {
        // If Input is detected,
        if (Input.GetKeyDown(KeyCode.Space))
        {
            // If the music exists, 
            if (music)
            {
                // If music is playing
                if (music.isPlaying)
                {
                    // TODO Stop Music
                    music.Stop(); 
                }
                else // if music is not playing
                {
                    // TODO Start Music
                    music.Play();
                }
            }
        }
    }

Declare an AudioSource object and check, 
if audio source exists, it's playing and space bar is pressed, Stop
else if audio source exists, it's not playing and space bar is pressed, Play

REMEMBER TO DRAG YOUR AUDIO SOURCE TO YOUR SCRIPT VARIABLE
IN THE UNITY EDITOR > INSPECTOR TAB. ALSO, DEACTIVATE PLAY ON AWAKE.


==========================================================
 How to set up Audio Sources using AudioSource
==========================================================

When you have your sounds in whichever format (.ogg, .mp3)

Right click on the object you want to create an audio source for 
and search for Audio > AudioSource.



==========================================
 2D Games : My Background is not showing
==========================================

If you added a Quad as a background and it's not showing,
adjust the Z value of the Quad to a positive value.
To validate that the background is showing, add a material (color)
to the background.

===================================================================
 2D Games : How to make my canvas the same size as my camera view
===================================================================

Select the canvas and go to the Inspector.
In the render mode dropdown list, select Screen Space - Camera.
Next, drag the camera object into the Render Camera slot.

Next go to the Canvas Scaler component in the Inspector and
in UI Scale Mode, select Scale With Screen Size.
Enter the Screen dimensions 
(Or the dimensions of your background. Example: 1600 x 900)

Finally, in Screen Match Mode, select Expand. 
This allows the canvas to expand with the content.

If you don't see your elements in the canvas, set Plane Distance to 1.



========================================
 Help!! My Button Text is not showing
========================================

To see what's happening, set the Horizontal and Vertical Overflow to Overflow.
If your height or width can't hold the text, it will not show.
Adjust the height and width accordingly in order for the text to appear.

=============================================
 How to get Fonts and add them to my project
=============================================

Download fonts from anywhere you like and add them to your assets. 
(Google Fonts, Ten By Twenty, Etc.)

You can drag and drop your fonts from your folder 
into the Unity Editor Assets Folder.


===========================================================
 How to have a solid color in an object (Without Lighting)
===========================================================

Create a new material.
Assign a color in the Albedo property.
Check the Emission Checkbox. (A new Color property should show up.
Select the color you want to emit and the object should have 
that color no matter what.


===========================================================
 How to add more inputs to a game (For example, Pong)
===========================================================

In pong, you have 2 rackets. If you wanted to play pong with another player,
Input keys would need to be different.

To achieve this, go to Edit > Project Settings > Input Manager

In Input Manager, you will see a number of inputs.
To add an input, increment the number (example, if it's 30, type 31).

In the case of pong, you move vertically. So you could create another input,
vertical2 where you use the arrow keys instead of "W"  and "S".

This would then help you bind the keys correctly with
methods such as "Input.GetAxisRaw("Vertical2");".


===========================================================
            How to Instantiate Objects via Code
===========================================================

You can instanciate based on prefabs.

To Instantiate objects, you can use the Instantiate method

Example script: 

// Variable for storing a prefab
    public Transform prefab;

// Start is called before the first frame update
void Start()
{
	for (int i = 0; i < 10; i++)
	{
		// In this overload of the Instantiate method,
		// you pass the prefab object, a position and the rotation.
		Instantiate(prefab, new Vector3(i* 3.0F, i + 5 , -39), Quaternion.identity);
	}
}

This method will generate 10 objects at the start of the game.
The object generated will depend on what prefab is passed into the script.

If you add this bit of code and comment the start method, 
you can instantiate objects each time you press the space bar.

 // Update is called once per frame
void Update()
{
	// When spacebar is pressed, create a new object.
	if(Input.GetKeyDown(KeyCode.Space))
	{
		Instantiate(prefab, new Vector3(40, counter + 5, 0), Quaternion.identity);
		counter++;
	}
}


===========================================================
     How to Instantiate Objects Using Invoke Repeating
===========================================================

The InvokeRepeating method Invokes the method passed in time seconds, then repeatedly every repeatRateseconds.

InvokeRepeating(string methodName, float time, float repeatRate);

Will use the same script as the one above, but adapted to using the InvokeRepeating method.

public class InstanciateCubes : MonoBehaviour
{
    // Variable for storing a prefab
    public Transform prefab;

    int counter = 0;

    private void Start()
    {

        InvokeRepeating(CreateNewCube, 10, 0.1);
    }

    public void CreateNewCube()
    {
        Instantiate(prefab, new Vector3(40, counter + 5, 0), Quaternion.identity);
        counter++;
		
		if (counter >= 5000)
        {
			// Cancels the invoke after having created 5000 objects.
            CancelInvoke();
        }
    }
}


TO STOP THE INVOKE REPEATING METHOD, USE THE INVOKE CANCEL METHOD.

===========================================================
     How to Use the PlayerPreferences - Saving Data
===========================================================

PlayerPreferences allows you to save data such as highscores, player names, etc.

The PlayerPrefs class has 2 methods to store data.

The Set and the Get method. These method have 3 variations. 
GetInt() / SetInt(), GetFloat() / SetFloat() and GetString() / SetString() 

The parameters for the get methods are a String key and you can also pass in a default value. 
The parameters for the set methods are a String key and the value. 

You can also delete keys, delete all and check if a key exists.

Below you will find a script that sets an int to the highest score passed.
Whenever the spacebar is clicked, the score will increment. 
The highest score with the "Score" key will remain in the PlayerPrefs object 


Here is the example script:

public class SavingData : MonoBehaviour
{
    int score = 0;

    // Start is called before the first frame update
    void Start()
    {
        Debug.Log("Stored score is "+ GetScore());
    }

    // Update is called once per frame
    void Update()
    {
        if (Input.GetKeyDown(KeyCode.Space))
        {
            // Increase score by 1
            score++;
            Debug.Log("Current Score is "+ score);
            // If the score is greater than the score already had,
            if (score > GetScore())
            {
                // Set a new score
                PlayerPrefs.SetInt("Score", 0);
                Debug.Log(PlayerPrefs.GetInt("Score"));
            }
        }
    }

    int GetScore()
    {
        // This method returns the integer with the corresponding passed key.
        // If there's no value in the passed key, it will return 0.
        int myScore = PlayerPrefs.GetInt("Score", 0);
        return myScore;
    }
}


============================================================
  How to check if there's an object below your object
============================================================

To check if there's an object below your specific game object,
you could use the Raycast or Ray Object.
Create a script.

(In this case, will create a script for a cube with red material)

The script should look like this: 

// Update is called once per frame
void Update()
{
	// Structure used to get information back from a raycast.
	RaycastHit hit;

	// Physics.Raycast method has many overloads.
	// The one used here is (raycastPositionOrigin, directionVector,MaxDistance,LayerMask)

	if (Physics.Raycast(transform.position, -Vector3.up, out hit, 100f))
	{
		print("Something is below the object at " + hit.transform.position);
	} else
	{
		print("Nothing underneath this object "+ gameObject.name);
	}
}

This script will print if there's an object below the item. 
If not, it will print the object name.

The Physics object represents the global physics properties and helper methods.

The RayCast is an operation from the camera point 
sending out a "ray" find the surface it collides 
with and then render the material on that surface 
for that pixel in the screen. Additionally, light 
sources may cast rays, and see if that shows a 
reflection on that material.

You can also use Ray.

This script will tell you what is around the mouse pointer at a distance of 100 points

// To know what i've hit
RaycastHit hit;

Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
// Mouse position is a vector3 with the current position of ourmouse.
// The camera is the device from which a player views the world.

// Checking if there is something within a distance of 100 from where the mouse is at.
if (Physics.Raycast(ray, out hit, 100f))
{
	print("Ray hit object" + hit.collider.gameObject.name);
}


============================================================
How to view things the same size no matter how far they are
============================================================

To do this, select your camera object.
In the inspector, search for "perspective" and 
set your camera perspective to orthographic.

============================================================
		How to set a solid color backgroud.
============================================================

To do this, select your main camera object.
In the inspector, search for "clear flags" and 
set your Clear Flag to Solid Color. 
In the background property, you can set a color for 
your background.

============================================================
How to place cubes right next to each other right perfectly
============================================================

To place cubes next to each other perfectly, select the cube you want to place
beside another and press ctrl+shift. Then click and drag the position arrow to where
you want to place the cube. The object will then move in a fixed distance when dragged.
(Similar to pressing tab in a text document)

============================================================
     How to make the camera follow a specific target?
============================================================

To accomplish this, you must first create a script 
and add it to your camera object.

The script below is a good example:

/// <summary>
/// This script is used to make the camera follow the target passed 
/// </summary>
public class FollowCam : MonoBehaviour
{
    // Position of the target we want to follow (Player).
    public Transform target;

    // Offset to our player (What is our position in comparison to the player)
    private Vector3 offset;

    // Method runs when script loads
    void Awake()
    {
        // Setting the offset (camera position - player position)
        offset = transform.position - target.position;
    }

    // This method is called in every frame if the behavior is enabled.
    // (Method usually used for camera updates)
    private void LateUpdate()
    {
        // Change the position of our camera.
        transform.position = target.position + offset;
    }
}


============================================================
     Animation Concepts
============================================================

To create an animation, right click > Create > Animation Controller

The Animator tab will open and you will see a few nodes. 

These include the Any State, Entry and Exit.

# The Entry Node is the point whenever the animator awakes.


To create transitions for animations, you need to create a new state node.
To do this, right click and select create state > empty.

In the Inspector > Motion property, you can select which animation will play.

If you have animations from downloaded assets, you can select them and add them to your animation controller.

You can create states (nodes) and transitions (arrows).

When having an animation transition, you can create parameters and conditions.
To create parameters, go to the upper left window tab and select parameters.
There are 4 types of parameters: 
Float, Int, Bool and Trigger.
Select a parameter that applies and add it to your condition.

To add conditions, click on the transition arrow and in the inspector you wills
see a property called Conditions.
Add your parameter to that condition.

You can set trigger parameters using the Animator.SetTrigger method in your script.